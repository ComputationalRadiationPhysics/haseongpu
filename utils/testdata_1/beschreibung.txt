Der Aufruf des MC-Codes erfolgt z.B. in Zeile 261 von ASE_calc_clad.m in der Form

[Rückgabewerte] = Funktionsname(Eingabe);

[rand_array, phi_ASE, importance, N_rays] = for_loops_clad(p,t_int,beta_cell,beta_vol,normals_x,normals_y,sorted_int,surface,x_center,y_center,normals_p,forbidden, NumRays, N_tot, z_mesh,laser.s_ems,laser.s_abs,clad_int,clad_number,clad_abs);

Die Casts der Parameter der Eingabe sind die Folgenden:
0	p				: array of double 
1	t_int			: array of int32 
2	beta_cell		: array of double 
3	beta_vol		: array of double 
4	normals_x		: array of double 
5	normals_y		: array of double
6	sorted_int		: array of double
7	surface			: array of double
8	x_center		: array of double
9	y_center		: array of double
10	normals_p		: array of int32
11	forbidden		: array of int32
12	NumRays			: int32
13	N_tot			: double
14	z_mesh			: int
15	laser.s_ems		: double
16	laser.s_abs		: double
17	clad_int		: array of int32
18	clad_number		: int
19	clad_abs		: double

im C-Code sind die Namen anders und sind folgendermaßen zugeordnet:
0	p_in			: Punktkoordinaten
					: Koordinaten in x und y
1 	t_in			: Zuordnung Punkte (vertices), die ein Dreieck aufspannen
					: Liste von Punkt1, Punkt2, Punkt3 (Koordinaten-Zuordnung übder index von p_in), welche ein Dreieck aufspannen
2	beta_p			: Anregung in den Punkten (Anregung steht im direkten Zusammenhang mit der Verstärkung)
					: Zahlenwert für die Anregung in den Punkten im gesamten Gitter (auch in z!), Zuordnung über Indices von p_in und z
3	beta_v			: Anregung in den Volumina
					: Zuordnung über Index von t_in und z
4	n_x				: x-Komponente der Normalen
					: für jede Seite (Index über t_in) ein Wert, Seite1 -> Punkt1-2, Seite2 -> Punkt1-3, Seite3 -> Punkt2-3
5	n_y				: y-Komponente der Normalen
					: für jede Seite (Index über t_in) ein Wert, Seite1 -> Punkt1-2, Seite2 -> Punkt1-3, Seite3 -> Punkt2-3
6	neighbors		: Indizes der Nachbardreiecke an der jeweiligen Kanten
					: Zuordnung des Nachbardreiecks an Seite1, 2 und 3
7	surface			: Oberfläche der Dreiecke
					: benötigt für die Sicherstellung der Gleichverteilung der Teststrahlen
8	center_x		: x-Koordinate des Dreieckmittelpunktes
					: x-Koordinate für jedes Dreieck, Index nach t_in
9	center_y		: y-Koordinate des Dreieckmittelpunktes
					: y-Koordinate für jedes Dreieck, Index nach t_in
10	n_p				: Index zu einem der Punkte, welche für die Normalenberechnungen benutzt worden ist
					: Index orientiert sich an p_in, die Koordinaten des Punktes werden für die eineindeutige Darstellung der zu testenden Schnittebenen benötigt (Berechnung in for-loops_clad.cpp ab 349)
11	forbidden		: Index, welche Seite beim benachbarten Dreieck nicht getested werden muss
					: -1: Rand, 0,1,2: die Seite in dem Indexschema von n_x etc. für das benachbarte Dreieck
12	Rays			: Anzahl der Teststrahlen pro Punkt
					: s.o.
13	dop				: Dotierung des Lasermatierials
					: wird für die Berechnung der Verstärkung benötigt
14	zm				: Anzahl der z-Ebenen
					: s.o.
15	se				: Wechselwirkungsquerschnitt Emission
					: wird für die Berechnung der Verstärkung benötigt
16	sa				: Wechselwirkungsquerschnitt Absorption
					: wird für die Berechnung der Verstärkung benötigt
17	cell_type		: Zugehörigkeit der Zelle, Indices
					: Das gemeshte Gebiet kann aus Einzelkomponenten, z.B. mehreren verschiedenen Materialen usw., bestehen (mit Index 0,1,2,...) 
18	cladnum			: Welcher Index ist das Cladding
					: Zuordnung, welche Komponente das Claddingmaterial ist
19	cladabs			: Absorptionskoeffizient des Claddings
					: wird für die Berechnung der Absorption im Cladding benötigt

Die Arrays mit ihren Reihen und Spalten werden bei der Übergabe automatisch in derefernzierte 1D-Arrays 
umgewandelt. Siehe:
http://cnx.org/content/m12348/latest/

"MATLAB gives the matrix as rows first, then columns (if you were to traverse the matrix linearly) 
so to jump by position, (x,y) maps to x*colLen+y."
