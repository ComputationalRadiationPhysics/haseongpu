#include <stdio.h>

#include "grid.h"
#include "buildgrid.h"
#include "filtergrid_cpu.h"

void testFilter(Grid grid, int *results, int* length, int *otherresults) {
  RayCu ray;

  PointCu start;
  start.x = 1.35;
  start.y = 2.35;
  start.z = 3.35;

  VectorCu dir;
  dir.x = 8.35;
  dir.y = 2.35;
  dir.z = 3.35;
  ray.P = start;
  ray.direction = dir;

  *length = filterCpu(&grid, &ray, results);
}

int main() {
  Grid grid;
  //prepare grid with prisms

  grid.dim.x = 10;
  grid.dim.y = 10;
  grid.dim.z = 10;

  grid.aabb.min.x = 0;
  grid.aabb.min.y = 0;
  grid.aabb.min.z = 0;

  grid.aabb.max.x = 20;
  grid.aabb.max.y = 20;
  grid.aabb.max.z = 20;

  grid.cellList = (GridCell*) malloc(1000*sizeof(GridCell));

  for(int x=0; x<10; ++x)
    for(int y=0; y<10; ++y)
      for(int z=0; z<10; ++z) {
        GridCell cell;
        cell.prismIdxList = (int*) malloc(3*sizeof(int));
        cell.prismIdxList[0] = x;
        cell.prismIdxList[1] = y;
        cell.prismIdxList[2] = z;
        cell.length = 3;
        grid.cellList[x+(y*grid.dim.x)+(z*grid.dim.x*grid.dim.y)] = cell;
      }

  //Grid d_grid;
  //copyGrid2GPU(&grid, &d_grid);

  int *results;
  int length;
  int otherresults[512];
  testFilter(grid, results, &length, otherresults);

  printf("Got %i results: ", length);
  for(int i=0; i<length; ++i) {
    printf("%i, ", results[i]);
  }
  puts("");

  return 0;
}
